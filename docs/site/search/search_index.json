{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! The wiki is currently being developed. Some of the pages have been created and have basic information added to them. Some do not. Please bear with us while the wiki takes shape. PiPass is a webpage which provides an interface to whitelist pages which are blocked by your PiHole blocklists. This project is the result of @roenw 's original work, with community support along the way. Community contributions by people like you keep this project alive. Contributors A full list of contributors can be found on the Contributors Page For discussion, please refer to the Reddit Page .","title":"Welcome!"},{"location":"#welcome","text":"The wiki is currently being developed. Some of the pages have been created and have basic information added to them. Some do not. Please bear with us while the wiki takes shape. PiPass is a webpage which provides an interface to whitelist pages which are blocked by your PiHole blocklists. This project is the result of @roenw 's original work, with community support along the way. Community contributions by people like you keep this project alive.","title":"Welcome!"},{"location":"#contributors","text":"A full list of contributors can be found on the Contributors Page For discussion, please refer to the Reddit Page .","title":"Contributors"},{"location":"installation/","text":"Installation","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"language/","text":"Languages PiPass comes with a few languages right out of the box. You can see if your language is natively supported by running ls <webroot>/locale | grep locale-xx . Replace xx with your language's ISO 639-1 code. If the command returns an output, the language has been added to PiPass by another contributor and is ready for you to use. If not, the language is unavailable, but you can make it available . Selecting a Language The default language of PiPass is English due to the vast majority of PiPass users natively speaking English. To select a new language, open PiPass' config.php file in your favorite text editor, and locate the following line: $conf[\"language\"] = get_config('language', \"en\"); Change en to your language's ISO 639-1 code, save the file, and attempt to visit a blocked website. You may need to clear your browser's cache for the changes to update. Adding a Language Languages are crucial to the accessibility and global usefulness of PiPass, and we rely on people who can speak several languages to help translate the software. First, begin by forking the repository into your own GitHub account. It will usually be simpler to complete this guide through the GitHub web interface, but you can clone your fork on to your computer and edit off of there, if you would like to. After you do that,","title":"Languages"},{"location":"language/#languages","text":"PiPass comes with a few languages right out of the box. You can see if your language is natively supported by running ls <webroot>/locale | grep locale-xx . Replace xx with your language's ISO 639-1 code. If the command returns an output, the language has been added to PiPass by another contributor and is ready for you to use. If not, the language is unavailable, but you can make it available .","title":"Languages"},{"location":"language/#selecting-a-language","text":"The default language of PiPass is English due to the vast majority of PiPass users natively speaking English. To select a new language, open PiPass' config.php file in your favorite text editor, and locate the following line: $conf[\"language\"] = get_config('language', \"en\"); Change en to your language's ISO 639-1 code, save the file, and attempt to visit a blocked website. You may need to clear your browser's cache for the changes to update.","title":"Selecting a Language"},{"location":"language/#adding-a-language","text":"Languages are crucial to the accessibility and global usefulness of PiPass, and we rely on people who can speak several languages to help translate the software. First, begin by forking the repository into your own GitHub account. It will usually be simpler to complete this guide through the GitHub web interface, but you can clone your fork on to your computer and edit off of there, if you would like to. After you do that,","title":"Adding a Language"},{"location":"troubleshooting/","text":"Troubleshooting","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"uninstalling/","text":"Uninstalling We will miss you, but we want to make this an easy breakup. To uninstall, execute the following command in the Terminal: bash <(wget -qO- https://kubrick.roen.us/pipass/scripts/uninstall.sh) Feedback Please take the time to submit feedback addressing the issues or limitations that are moving you to uninstall. Ensuring Full Removal The uninstall script will attempt to revert all changes the PiPass installer made, but is not perfect. Here are some things to check once the uninstaller has completed. Check if the PiPass entry in /etc/sudoers has been removed. ( sudo cat /etc/sudoers | grep \\/usr\\/local\\/bin\\/pihole Make sue 404 redirects have been disabled ( cat /etc/lighttpd/lighttpd.conf | grep 404 ) Check if PiPass files have been removed ( ls /var/www/ | grep blockpage ) Optional: Make sure you have reverted NODATA -based blocking ( cat /etc/pihole/pihole-FTL.conf | grep BLOCKINGMODE ) That's it. PiPass should be uninstalled.","title":"Uninstalling"},{"location":"uninstalling/#uninstalling","text":"We will miss you, but we want to make this an easy breakup. To uninstall, execute the following command in the Terminal: bash <(wget -qO- https://kubrick.roen.us/pipass/scripts/uninstall.sh)","title":"Uninstalling"},{"location":"uninstalling/#feedback","text":"Please take the time to submit feedback addressing the issues or limitations that are moving you to uninstall.","title":"Feedback"},{"location":"uninstalling/#ensuring-full-removal","text":"The uninstall script will attempt to revert all changes the PiPass installer made, but is not perfect. Here are some things to check once the uninstaller has completed. Check if the PiPass entry in /etc/sudoers has been removed. ( sudo cat /etc/sudoers | grep \\/usr\\/local\\/bin\\/pihole Make sue 404 redirects have been disabled ( cat /etc/lighttpd/lighttpd.conf | grep 404 ) Check if PiPass files have been removed ( ls /var/www/ | grep blockpage ) Optional: Make sure you have reverted NODATA -based blocking ( cat /etc/pihole/pihole-FTL.conf | grep BLOCKINGMODE ) That's it. PiPass should be uninstalled.","title":"Ensuring Full Removal"},{"location":"upgrading/","text":"Upgrading Upgrading your PiPass installation is a relatively easy process and will take 2 to 5 minutes depending on your experience with Linux and the git version-control system. Bear in mind that if you are upgrading from version 1.3 or lower, the update command will break your PiPass installation until you complete the upgrade process. This Wiki article will guide you through that whole process. Beginning the Upgrade First, start by initiating the upgrade. Execute bash <(wget -qO- https://kubrick.roen.us/pipass/scripts/install.sh) and answer the prompts. Checking for Conflicts Now, let's see if we are done. Execute this following command: cat /var/www/config.php | grep \\<\\< If there is no output returned Lucky you! There were no conflicts, and you are probably done with the upgrade. Head to the blockpage and make sure it's intact. If the blockpage is not showing up, run git diff --name-only --diff-filter=U | grep --invert-match setup/ and follow the directions listed below on the files listed. If there is an output returned If the command does return an output: it's likely that we've encountered a merge conflict. To someone who hasn't had a lot of experience with git , this can sound daunting, but it isn't. All it means is that PiPass code has been updated as well as the code on your system. All you have to decide is which code stays . Follow the instructions below to resolve this conflict. Resolving Merge Conflicts If you are inexperienced with git , we reccomend you copy your configuration files into a program such as Visual Studio Code which can help you deal with merge conflicts very easily and intuitively. 1. Open config.php in your favorite text editor, and find the part that looks like this: <<<<<<< Updated upstream $conf['blockpage_url'] = get_config('blockpage_url', \"blockpage/index.php\"); ======= $conf['blockpage_url'] = \"https://172.16.64.31/blockpage/\"; >>>>>>> Stashed changes 2. Remove the lines which contain <<<<<<< and >>>>>>> . The top line is the new code from PiPass, and the bottom line is the code that was on your system. Your job, now, is to merge these lines of code. For this example, the merge result would look like: $conf['blockpage_url'] = get_config('blockpage_url', \"https://172.16.64.31/blockpage/\");","title":"Upgrading"},{"location":"upgrading/#upgrading","text":"Upgrading your PiPass installation is a relatively easy process and will take 2 to 5 minutes depending on your experience with Linux and the git version-control system. Bear in mind that if you are upgrading from version 1.3 or lower, the update command will break your PiPass installation until you complete the upgrade process. This Wiki article will guide you through that whole process.","title":"Upgrading"},{"location":"upgrading/#beginning-the-upgrade","text":"First, start by initiating the upgrade. Execute bash <(wget -qO- https://kubrick.roen.us/pipass/scripts/install.sh) and answer the prompts.","title":"Beginning the Upgrade"},{"location":"upgrading/#checking-for-conflicts","text":"Now, let's see if we are done. Execute this following command: cat /var/www/config.php | grep \\<\\<","title":"Checking for Conflicts"},{"location":"upgrading/#if-there-is-no-output-returned","text":"Lucky you! There were no conflicts, and you are probably done with the upgrade. Head to the blockpage and make sure it's intact. If the blockpage is not showing up, run git diff --name-only --diff-filter=U | grep --invert-match setup/ and follow the directions listed below on the files listed.","title":"If there is no output returned"},{"location":"upgrading/#if-there-is-an-output-returned","text":"If the command does return an output: it's likely that we've encountered a merge conflict. To someone who hasn't had a lot of experience with git , this can sound daunting, but it isn't. All it means is that PiPass code has been updated as well as the code on your system. All you have to decide is which code stays . Follow the instructions below to resolve this conflict.","title":"If there is an output returned"},{"location":"upgrading/#resolving-merge-conflicts","text":"If you are inexperienced with git , we reccomend you copy your configuration files into a program such as Visual Studio Code which can help you deal with merge conflicts very easily and intuitively. 1. Open config.php in your favorite text editor, and find the part that looks like this: <<<<<<< Updated upstream $conf['blockpage_url'] = get_config('blockpage_url', \"blockpage/index.php\"); ======= $conf['blockpage_url'] = \"https://172.16.64.31/blockpage/\"; >>>>>>> Stashed changes 2. Remove the lines which contain <<<<<<< and >>>>>>> . The top line is the new code from PiPass, and the bottom line is the code that was on your system. Your job, now, is to merge these lines of code. For this example, the merge result would look like: $conf['blockpage_url'] = get_config('blockpage_url', \"https://172.16.64.31/blockpage/\");","title":"Resolving Merge Conflicts"},{"location":"wiki-contributions/","text":"Wiki Contributions To contribute to the PiPass Wiki, simply fork the PiPass repository . Make your edits on your fork, and then submit a pull request to the PiPass repository. When your branch is merged into master, I'll rebuild the Wiki and the changes will go live. MkDocs PiPass uses MkDocs as its wiki provider. MkDocs generates visually appealing static HTML pages from Markdown. Markdown Markdown is the syntax that is used to build the wiki. You can learn more about how to use it here . Wiki Code of Conduct Be helpful Don't use foul language (swearing, racial slurs, etc.) Be consice, but make your edits useful to people of all skill levels Do not link or reference unrelated products or websites","title":"Wiki Contributions"},{"location":"wiki-contributions/#wiki-contributions","text":"To contribute to the PiPass Wiki, simply fork the PiPass repository . Make your edits on your fork, and then submit a pull request to the PiPass repository. When your branch is merged into master, I'll rebuild the Wiki and the changes will go live.","title":"Wiki Contributions"},{"location":"wiki-contributions/#mkdocs","text":"PiPass uses MkDocs as its wiki provider. MkDocs generates visually appealing static HTML pages from Markdown.","title":"MkDocs"},{"location":"wiki-contributions/#markdown","text":"Markdown is the syntax that is used to build the wiki. You can learn more about how to use it here .","title":"Markdown"},{"location":"wiki-contributions/#wiki-code-of-conduct","text":"Be helpful Don't use foul language (swearing, racial slurs, etc.) Be consice, but make your edits useful to people of all skill levels Do not link or reference unrelated products or websites","title":"Wiki Code of Conduct"}]}